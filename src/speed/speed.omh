// vim: set expandtab:
$begin speed$$
$spell
    colpack
    Jacobian
    Jacobians
    adolc
    cppad
    subgraph
    jac
    CppAD
    dierfj
    dficfj
    nnz
    csv
    Minpack
    deptfg
    onepass
    cppadcg
    subcg
$$

$section Running Jacobian and Hessian Speed Tests$$

$head Syntax$$
$codei%speed %csv_file% \
    %[ name_1%=%value_1 ]% %...% %[ name_K%=%value_K ]% \
    %implement% %problem% %size% %option_list%$$

$head name_k=value_k$$
For $icode%k%=1, %...%, %K%$$, there is an extra column in the
output file with heading equal to $icode name_k$$.
The value in this column,
in the new row of $cref/csv_file/speed/csv_file/$$,
is $icode value_k$$.
Neither $icode name_k$$ nor $icode value_k$$ can contain,
$code =$$, the equals character.

$head implement$$
This must be one of the following:

$subhead adolc$$
Use the ADOL-C $code sparse_jac$$ routine to compute Jacobians.

$subhead cppad$$
Use the CppAD $code sparse_jac_for$$ or $code sparse_jac_rev$$
routine to compute Jacobians and Hessians.

$subhead subgraph$$
Use the CppAD $code subgraph_jac_rev$$ routine to compute Jacobians
and Hessians.

$subhead cppadcg$$
Use the CppAD $code sparse_jac_for$$ or $code sparse_jac_rev$$ routine
together with CppADCodeGen to compute Jacobians.

$subhead subcg$$
Use the CppAD $code subgraph_jac_rev$$ routine together with CppADCodeGen
to compute Jacobians and Hessians.

$head problem$$
This argument identifies the case that we are testing and
is one of the following:

$subhead dficfj$$
This is the Minpack2 Flow in a Channel problem.
The corresponding test computes sparse Jacobians
for $latex f : \B{R}^n \rightarrow \B{R}^n$$.

$subhead dierfj$$
This is the Minpack2 Incompressible Elastic Rod problem.
The corresponding test computes sparse Jacobians
for $latex f : \B{R}^n \rightarrow \B{R}^n$$.

$subhead deptfg$$
This is the Minpack2 Elastic-Plastic Torsion problem.
The corresponding test computes sparse Hessians
for $latex f : \B{R}^n \rightarrow \B{R}$$.

$head size$$
This is the size of the test problem; e.g.,
for $code dficfj$$ it is the number of sub-intervals.
This corresponds to the number of variables is $icode n$$ below:

$table
$icode problem$$ $pre  $$ $cnext $icode n$$                  $rnext
$code dficfj$$   $pre  $$ $cnext $codei%8% * %size%$$        $rnext
$code dierfj$$   $pre  $$ $cnext $codei%15% * %size% + 3%$$  $rnext
$code deptfg$$   $pre  $$ $cnext $icode%size% * %size%$$
$tend

$head option_list$$
This is a list of options,
that may or may not be present, at the end of the command line.
The possible options are as follows:

$subhead --colpack$$
This option must be present when using the $code adolc$$ implementation and
cannot be present when using the $code subgraph$$ and $code subcg$$ implementations.
If it is present (not present) the matrix compression is computed
using the Colpack (CppAD) coloring algorithms.
(The $code subgraph$$ and $code subcg$$ implementations
does not use a coloring algorithm.)

$subhead --indirect$$
This option can only be present when computing sparse Hessians
using the $code adolc$$ implementation.
If it is present (not present)
the corresponding sparse Hessian is
computed by solving a triangular set of equations (computed directly)
from the AD results.

$subhead --optimize$$
If this option is present (not present),
the corresponding cppad function objects are optimized (not optimized).
This optimization is not include in the timing results.
This option can not be used when $icode implement$$ is $code adolc$$.

$subhead --setup$$
If this option is present (not present),
the time to setup the AD calculation is included (not included)
in the timing test.
This includes recording the function,
calculating the sparsity pattern,  compression.
In the case of $code cppadcg$$ and $code subcg$$ implementations
it also includes generating and compiling the source code.

$subhead --reverse$$
If this option is present (not present),
reverse mode is used (not used) to calculate the results.
This option must be present when $icode implement$$ is
$code subgraph$$ or $code subcg$$.
(so far CppAD has only implemented reverse mode sub-graphs).
This option cannot be present when implementation is
$code cppad$$ or $code cppadcg$$ and
$cref/--onepass/speed/option_list/--onepass/$$ is present.
It cannot be present for Hessian problems when $icode implement$$ is $code adolc$$.

$subhead --onepass$$
If this option is present (not present),
one pass of the tape (recorded function)
is used to compute the entire sparse Jacobian.
Otherwise only one direction is computed for each pass of the tape.
(Multiple columns of the Jacobian still get compressed into each pass).
This option must be present for the Jacobian cases where
$icode implement$$ is $code adolc$$.
This option cannot be present for the following cases:
$list number$$
Hessian problems.
$lnext
when $icode implement$$ is $code subgraph$$ or $code subcg$$.
$lnext
when $icode implement$$ is $code cppad$$ or $code cppadcg$$
and $cref/--reverse/speed/option_list/--reverse/$$ is present.
(so far CppAD has only implemented multiple directions for forward mode).
$lend

$subhead --correct$$
If this option is present (not present),
a correctness check is included (not included).
This slows down the calculations and is intended to be used
to check that the program is functioning properly.

$head csv_file$$
The first line of this csv file is the header which contains the column names.
It starts with
$codei%
    %name_1%,%...%,%name_K%,implement,problem,
%$$
Next the header contains the names of the options in order; i.e.,
$codei%
    colpack,%...%,correct,
%$$
At the end the header contains the column names
$codei%
    n,nnz,sec
%$$
If the file does not exist, it is created.
Each run of $code speed$$ creates a new line of data
at the end of the file in this file.
The values placed in this line, for each column,
is specified below:

$subhead name_k$$
For $icode%k%=1, %...%, %K%$$, the value $icode value_k$$ is placed
in column $icode name_k$$.

$subhead implement$$
The values $icode implement$$ is the corresponding
command line arguments when $code speed$$.

$subhead problem$$
The values $icode problem$$ is the corresponding
command line arguments when $code speed$$.

$subhead Options$$
The option values $icode colpack$$, ... ,$icode correct$$ are
$code true$$ ($code false$$)
if the corresponding option is present (not present) in the
$cref/option_list/speed/option_list/$$.

$subhead n, m$$
The value $icode n$$ ($icode m$$) is the size of the domain space
(range space).

$subhead nnz$$
The value $icode nnz$$ is the number of non-zeros in the sparse
Jacobian (when $icode%m% != 1%$$) or sparse Hessian (when $icode%m% == 1%$$).
Note that $icode nnz$$ for the $code double$$ implementation is the
actual number of non-zeros, while for the other implementations it is number
of possibly non-zero values.

$subhead sec$$
The value $icode sec$$ is the average number of seconds for each calculation
of the Jacobian if $icode%m% == 1%$$, or Hessian if $icode%m% > 1%$$.

$head Other Output$$
If no errors are detected, $code speed: OK$$ is printed
on standard output and
program exits with status $code 0$$.
If an error is detected; e.g., the correctness check fails,
an error message is printed on standard error and the program exits
with status $code 1$$.

$childtable%
    src/speed/speed.cpp%
    src/speed/setup.hpp%
    src/speed/test.hpp%
    src/speed/write_csv.cpp
%$$

$end
