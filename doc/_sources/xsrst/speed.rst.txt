!!!!!
speed
!!!!!

.. toctree::
   :maxdepth: 1
   :hidden:

   speed_global
   speed_setup
   speed_test
   speed_write_csv

.. include:: ../preamble.rst

.. meta::
   :keywords: speed, run, a, jacobian, or, hessian, speed, test

.. index:: speed, run, a, jacobian, or, hessian, speed, test

.. _speed:

Run a Jacobian or Hessian Speed Test
####################################
.. contents::
   :local:

.. meta::
   :keywords: syntax

.. index:: syntax

.. _speed.syntax:

Syntax
******

| ``speed`` *csv_file* \\
| |tab| [  *name_1* = *value_1*  ] ... [  *name_K* = *value_K*  ] \\
| |tab| *implement* *problem* *size* *option_list*

.. meta::
   :keywords: name_k=value_k

.. index:: name_k=value_k

.. _speed.name_k=value_k:

name_k=value_k
**************
For *k* =1, ... , *K* , there is an extra column in the
output file with heading equal to *name_k* .
The value in this column,
in the new row of :ref:`csv_file<speed.csv_file>`,
is *value_k* .
Neither *name_k* nor *value_k* can contain,
``=`` , the equals character.

.. meta::
   :keywords: implement

.. index:: implement

.. _speed.implement:

implement
*********
This must be one of the following:

.. meta::
   :keywords: adolc

.. index:: adolc

.. _speed.implement.adolc:

adolc
=====
Use the ADOL-C ``sparse_jac`` routine to compute Jacobians.

.. meta::
   :keywords: cppad

.. index:: cppad

.. _speed.implement.cppad:

cppad
=====
Use the CppAD ``sparse_jac_for`` or ``sparse_jac_rev``
routine to compute Jacobians and Hessians.

.. meta::
   :keywords: subgraph

.. index:: subgraph

.. _speed.implement.subgraph:

subgraph
========
Use the CppAD ``subgraph_jac_rev`` routine to compute Jacobians
and Hessians.

.. meta::
   :keywords: cppadcg

.. index:: cppadcg

.. _speed.implement.cppadcg:

cppadcg
=======
Use the CppAD ``sparse_jac_for`` or ``sparse_jac_rev`` routine
together with CppADCodeGen to compute Jacobians.

.. meta::
   :keywords: subcg

.. index:: subcg

.. _speed.implement.subcg:

subcg
=====
Use the CppAD ``subgraph_jac_rev`` routine together with CppADCodeGen
to compute Jacobians and Hessians.

.. meta::
   :keywords: problem

.. index:: problem

.. _speed.problem:

problem
*******
This argument identifies the case that we are testing and
is one of the following:

.. meta::
   :keywords: dficfj

.. index:: dficfj

.. _speed.problem.dficfj:

dficfj
======
This is the Minpack2 Flow in a Channel problem.
The corresponding test computes sparse Jacobians
for :math:`f : \B{R}^n \rightarrow \B{R}^n`.

.. meta::
   :keywords: dierfj

.. index:: dierfj

.. _speed.problem.dierfj:

dierfj
======
This is the Minpack2 Incompressible Elastic Rod problem.
The corresponding test computes sparse Jacobians
for :math:`f : \B{R}^n \rightarrow \B{R}^n`.

.. meta::
   :keywords: deptfg

.. index:: deptfg

.. _speed.problem.deptfg:

deptfg
======
This is the Minpack2 Elastic-Plastic Torsion problem.
The corresponding test computes sparse Hessians
for :math:`f : \B{R}^n \rightarrow \B{R}`.

.. meta::
   :keywords: dgl1fg

.. index:: dgl1fg

.. _speed.problem.dgl1fg:

dgl1fg
======
This is the Minpack2 Inhomogeneous Superconductors
(One Dimensional Ginzburg-Landau) problem.
The corresponding test computes sparse Hessians
for :math:`f : \B{R}^n \rightarrow \B{R}`.

.. meta::
   :keywords: size

.. index:: size

.. _speed.size:

size
****
This is the size of the test problem; e.g.,
for ``dficfj`` it is the number of sub-intervals.
This corresponds to the number of variables is *n* below:

.. csv-table::
    :widths: 7, 18

    *problem* , *n*
    ``dficfj`` , 8 * *size*
    ``dierfj`` , 15 * *size* + 3
    ``deptfg`` , *size* * *size*
    ``dgl2fg`` , *size*

.. meta::
   :keywords: option_list

.. index:: option_list

.. _speed.option_list:

option_list
***********
This is a list of options,
that may or may not be present, at the end of the command line.
The possible options are as follows:

.. meta::
   :keywords: --colpack

.. index:: --colpack

.. _speed.option_list.--colpack:

--colpack
=========
This option must be present when using the ``adolc`` implementation and
can not be present when using the ``subgraph`` and ``subcg`` implementations.
If it is present (not present) the matrix compression is computed
using the Colpack (CppAD) coloring algorithms.
(The ``subgraph`` and ``subcg`` implementations
does not use a coloring algorithm.)

.. meta::
   :keywords: --indirect

.. index:: --indirect

.. _speed.option_list.--indirect:

--indirect
==========
This option can only be present when computing sparse Hessians
using the ``adolc`` implementation.
If it is present (not present)
the corresponding sparse Hessian is
computed by solving a triangular set of equations (computed directly)
from the AD results.

.. meta::
   :keywords: --optimize

.. index:: --optimize

.. _speed.option_list.--optimize:

--optimize
==========
If this option is present (not present),
the corresponding cppad function objects are optimized (not optimized).
This optimization is not include in the timing results.
This option can not be used when *implement* is ``adolc`` .

.. meta::
   :keywords: --setup

.. index:: --setup

.. _speed.option_list.--setup:

--setup
=======
If this option is present (not present),
the time to setup the AD calculation is included (not included)
in the timing test.
This includes recording the function,
calculating the sparsity pattern,  compression.
In the case of ``cppadcg`` and ``subcg`` implementations
it also includes generating and compiling the source code.

.. meta::
   :keywords: --reverse

.. index:: --reverse

.. _speed.option_list.--reverse:

--reverse
=========
If this option is present (not present),
reverse mode is used (not used) to calculate the results.
This option must be present when *implement* is
``subgraph`` or ``subcg`` .
(so far CppAD has only implemented reverse mode sub-graphs).
This option can't be present when implementation is
``cppad`` or ``cppadcg`` and
:ref:`--onepass<speed.option_list.--onepass>` is present.
It can't be present for Hessian problems when *implement* is ``adolc`` .

.. meta::
   :keywords: --onepass

.. index:: --onepass

.. _speed.option_list.--onepass:

--onepass
=========
If this option is present (not present),
one pass of the tape (recorded function)
is used to compute the entire sparse Jacobian.
Otherwise only one direction is computed for each pass of the tape.
(Multiple columns of the Jacobian still get compressed into each pass).
This option must be present for the Jacobian cases where
*implement* is ``adolc`` .
This option can't be present for the following cases:

#.  Hessian problems.
#.  when *implement* is ``subgraph`` or ``subcg`` .
#.  when *implement* is ``cppad`` or ``cppadcg``
    and :ref:`--reverse<speed.option_list.--reverse>` is present.
    (so far CppAD has only implemented multiple directions for forward mode).

.. meta::
   :keywords: --correct

.. index:: --correct

.. _speed.option_list.--correct:

--correct
=========
If this option is present (not present),
a correctness check is included (not included).
This slows down the calculations and is intended to be used
to check that the program is functioning properly.

.. meta::
   :keywords: csv_file

.. index:: csv_file

.. _speed.csv_file:

csv_file
********
The first line of this csv file is the header which contains the column names.
It starts with

| |tab| *name_1* , ... , *name_K* , ``implement,problem`` ,

Next the header contains the names of the options in order; i.e.,

| |tab| ``colpack`` , ... , ``correct`` ,

At the end the header contains the column names

| |tab| ``n,nnz,sec``

If the file does not exist, it is created.
Each run of ``speed`` creates a new line of data
at the end of the file in this file.
The values placed in this line, for each column,
is specified below:

.. meta::
   :keywords: name_k

.. index:: name_k

.. _speed.csv_file.name_k:

name_k
======
For *k* =1, ... , *K* , the value *value_k* is placed
in column *name_k* .

.. meta::
   :keywords: implement

.. index:: implement

.. _speed.csv_file.implement:

implement
=========
The values *implement* is the corresponding
command line arguments when ``speed`` .

.. meta::
   :keywords: problem

.. index:: problem

.. _speed.csv_file.problem:

problem
=======
The values *problem* is the corresponding
command line arguments when ``speed`` .

.. meta::
   :keywords: options

.. index:: options

.. _speed.csv_file.options:

Options
=======
The option values *colpack* , ... , *correct* are
``true`` ( ``false`` )
if the corresponding option is present (not present) in the
:ref:`option_list<speed.option_list>`.

.. meta::
   :keywords: n, , m

.. index:: n, , m

.. _speed.csv_file.n,_m:

n, m
====
The value *n* ( *m* ) is the size of the domain space
(range space).

.. meta::
   :keywords: nnz

.. index:: nnz

.. _speed.csv_file.nnz:

nnz
===
The value *nnz* is the number of non-zeros in the sparse
Jacobian (when *m* ``!= 1`` ) or sparse Hessian (when *m* == 1 ).
Note that *nnz* for the ``double`` implementation is the
actual number of non-zeros, while for the other implementations it is number
of possibly non-zero values.

.. meta::
   :keywords: sec

.. index:: sec

.. _speed.csv_file.sec:

sec
===
The value *sec* is the average number of seconds for each calculation
of the Jacobian if *m* == 1 , or Hessian if *m* > 1 .

.. meta::
   :keywords: other, output

.. index:: other, output

.. _speed.other_output:

Other Output
************
If no errors are detected, ``speed: OK`` is printed
on standard output and
program exits with status ``0`` .
If an error is detected; e.g., the correctness check fails,
an error message is printed on standard error and the program exits
with status ``1`` .

.. meta::
   :keywords: children

.. index:: children

.. _speed.children:

Children
********

-  :ref:`speed_global`
-  :ref:`speed_setup`
-  :ref:`speed_test`
-  :ref:`speed_write_csv`

----

xsrst input file: ``src/speed/speed.xsrst``
